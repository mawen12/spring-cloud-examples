<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.mawen</groupId>
        <artifactId>spring-cloud-examples</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>spring-cloud-hoxton-samples</artifactId>
    <name>Spring Cloud Hoxton 示例工程</name>
    <packaging>pom</packaging>

    <modules>
        <module>hoxton.service-discovery</module>
        <module>hoxton.loadbalancer-openfeign</module>
        <module>hoxton.service-route</module>
        <module>hoxton.circuit-breaker</module>
        <module>hoxton.config-management</module>
    </modules>

    <properties>
        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <spring-boot.version>2.3.12.RELEASE</spring-boot.version>
        <spring-cloud.version>Hoxton.SR12</spring-cloud.version>
        <spring-cloud-alibaba.version>2.2.10-RC1</spring-cloud-alibaba.version>

        <!-- 各个微服务模块实现 -->
        <server.port>0</server.port>
        <start-class>0</start-class>
        <docker.service.discovery.name>eureka</docker.service.discovery.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- 如果父工程不是springboot，就要用以下方式使用插件，才能生成正常的jar -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                    </configuration>

                    <executions>
                        <execution>
                            <id>repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Spotify Docker 插件，用于生成docker镜像 -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.2.2</version>
                    <!-- 将插件绑定在package这个phase上，当执行 mvn package 时就自动执行 maven docker:build -->
                    <executions>
                        <execution>
                            <id>build-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <!-- 通用配置 -->
                    <configuration>
                        <!-- 镜像名称 仓库名称/镜像名称/标签名称-->
                        <imageName>mawen/${project.build.finalName}:${project.version}</imageName>
                        <!-- 强制覆盖 -->
                        <forceTags>true</forceTags>
                        <!-- 基础镜像 类似 Dockerfile 中的 FROM 命令 -->
                        <baseImage>openjdk:8u212-jre-alpine</baseImage>
                        <!-- 类似与 Dockerfile 中的 ENTRYPOINT 命令 -->
                        <!-- "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005" remote debug 支持-->
                        <!-- "-Djava.security.egd=file:/dev/./urandom" 提升随机数性能-->
                        <!-- "-Dspring.profiles.active=default,docker" 使用default,docker -->
                        <entryPoint>["java", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005", "-Djava.security.egd=file:/dev/./urandom", "-Dspring.profiles.active=default,docker", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                        <exposes>
                            <expose>${server.port}</expose>
                        </exposes>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <!-- 指定需要复制的根目录 -->
                                <directory>${project.build.directory}</directory>
                                <!-- 指定需要复制的文件 -->
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>

                <!-- Spotify Docker 新版插件，用于生成docker镜像 -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>1.4.13</version>
                    <executions>
                        <execution>
                            <id>default</id>
                            <goals>
                                <goal>build</goal>
                                <goal>push</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <tag>${project.version}</tag>
                        <buildArgs>
                            <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                        </buildArgs>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <resources>
            <!-- 解决YAML文件中使用@@读取maven变量报错的问题 -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>