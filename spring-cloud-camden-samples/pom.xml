<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.mawen</groupId>
        <artifactId>spring-cloud-examples</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <packaging>pom</packaging>

    <artifactId>spring-cloud-camden-samples</artifactId>
    <name>Spring Cloud Camden 示例工程</name>

    <modules>
        <module>microservice-simple-consumer-movie</module>
        <module>microservice-simple-provider-user</module>

        <module>microservice-discovery-eureka</module>
        <module>microservice-provider-user</module>
        <module>microservice-consumer-movie</module>

        <module>microservice-discovery-eureka-ha</module>
        <module>microservice-discovery-eureka-authenticating</module>
        <module>microservice-discovery-eureka-healthcheck</module>
        <module>microservice-provider-user-ip</module>

        <module>microservice-provider-user-my-metadata</module>
        <module>microservice-consumer-movie-understanding-metadata</module>
        <module>microservice-simple-consumer-movie</module>

        <module>microservice-consumer-movie-ribbon</module>
        <module>microservice-consumer-movie-ribbon-customizing</module>
        <module>microservice-consumer-movie-without-eureka</module>

        <module>microservice-consumer-movie-feign</module>
        <module>microservice-consumer-movie-feign-customizing</module>
        <module>microservice-provider-user-with-auth</module>
        <module>microservice-consumer-movie-feign-manual</module>
        <module>microservice-consumer-movie-feign-logging</module>
        <module>microservice-provider-user-multiple-params</module>
        <module>microservice-consumer-movie-feign-multiple-params</module>

        <module>microservice-consumer-movie-ribbon-hystrix</module>
        <module>microservice-consumer-movie-feign-hystrix-fallback</module>
        <module>microservice-consumer-movie-feign-hystrix-fallback-factory</module>
        <module>microservice-consumer-movie-feign-hystrix-fallback-stream</module>
        <module>microservice-hystrix-dashboard</module>
        <module>microservice-hystrix-turbine</module>
        <module>microservice-consumer-movie-ribbon-hystrix-turbine-mq</module>
        <module>microservice-hystrix-turbine-mq</module>

        <module>microservice-gateway-zuul</module>
        <module>microservice-file-upload</module>
        <module>microservice-gateway-zuul-filter</module>
        <module>microservice-gateway-zuul-fallback</module>
        <module>microservice-gateway-zuul-aggregation</module>

        <module>microservice-config-server</module>
        <module>microservice-config-client</module>
        <module>microservice-config-server-health</module>
        <module>microservice-config-client-refresh</module>
        <module>microservice-config-client-refresh-cloud-bus</module>
        <module>microservice-config-server-refresh-cloud-bus</module>
        <module>microservice-config-server-eureka</module>
        <module>microservice-config-client-eureka</module>
        <module>microservice-config-server-authenticating</module>
        <module>microservice-config-client-authenticating</module>

        <module>microservice-simple-provider-user-trace</module>
        <module>microservice-simple-consumer-movie-trace</module>
        <module>microservice-trace-zipkin-server</module>
        <module>microservice-simple-consumer-movie-trace-zipkin</module>
        <module>microservice-simple-provider-user-trace-zipkin</module>
        <module>microservice-trace-zipkin-server-stream</module>
        <module>microservice-simple-provider-user-trace-zipkin-stream</module>
        <module>microservice-simple-consumer-movie-trace-zipkin-stream</module>

        <module>microservice-discovery-eureka-dockerfile</module>
        <module>microservice-discovery-eureka-docker-maven-plugin</module>
        <module>microservice-discovery-eureka-dockerfile-docker-maven-plugin</module>
        <module>microservice-discovery-eureka-docker-compose</module>
    </modules>

    <properties>
        <!-- 使用1.8版本运行该模块内项目，高于1.8会出现启动Eureka报错的问题 -->
        <java.version>1.8</java.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <spring-boot.version>1.4.3.RELEASE</spring-boot.version>
        <spring-cloud.version>Camden.SR4</spring-cloud.version>

        <server.port>0</server.port>
        <start-class>0</start-class>
        <docker.service.discovery.name>eureka</docker.service.discovery.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.26</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot 依赖 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Spring Cloud 依赖 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <fork>true</fork>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <resources>
            <!-- 解决YAML文件中使用@@读取maven变量报错的问题 -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                    </configuration>

                    <executions>
                        <execution>
                            <id>repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Spotify Docker 插件 -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.4.13</version>
                    <executions>
                        <execution>
                            <id>build-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <imageName>mawen/${project.build.finalName}:${project.version}</imageName>
                        <forceTags>true</forceTags>
                        <baseImage>openjdk:8u212-jre-alpine</baseImage>
                        <entryPoint>
                            [
                                "java", \
                                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005", \
                                    "-Djava.security.egd=file:/dev/./urandom", \
                                    "-Dspring.profiles.active=default,docker", \
                                    "-jar", \
                                    "/${project.build.finalName}.jar"
                            ]
                        </entryPoint>
                        <exposes>
                            <expose>${server.port}</expose>
                        </exposes>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>